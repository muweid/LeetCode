#!/usr/bin/env python3

__author__ = 'Wei Mu'

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        if head == None:
            return None
        
        l = 0
        p = head
        
        while p != None:
            p = p.next
            l += 1
        
        return(self.helper_func(head, l))
    
    def helper_func(self, l_node, l):
        mid = l // 2
        p = l_node
        
        for i in range(mid):
            p = p.next
        
        if p == None:
            return None
        else:
            root = TreeNode(p.val)
        
        if mid > 0:
            root.left = self.helper_func(l_node, mid)
        else:
            root.left = None
        
        if l - mid - 1 == 0:
            root.right = None
        else:
            root.right = self.helper_func(p.next, l - mid - 1)
        
        return root
