#!/usr/bin/env python3

__author__ = 'Wei Mu'

"""
Two methods are included. 
method 1 is a traidition approach using two for loops and two pointers, but faster.
method 2 used dynamic programming. It is slower, but can be easily extended to five sum, six sum, ...
"""

class Solution:
    def fourSum(self, nums, target):
        
    
    def fourSum2(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if nums == [] or len(nums) < 4:
            return []
        
        return self.fourSumHelper(nums, 4, target)
    
    def fourSumHelper(self, nums, n_add, target):
        if n_add == 1:
            ans = []
            for i in nums:
                if i == target:
                    ans.append([i])
            return ans
                
        if n_add * max(nums) < target or n_add * min(nums) > target:
            return []
        
        
        ans = []
        
        for i in range(len(nums)):
            temp = nums.pop(i)
            cur_ans = self.fourSumHelper(nums, n_add - 1, target - temp)
            nums.insert(i, temp)
            
            for j in cur_ans:
                temp_list = [temp] + j
                temp_list.sort()
                if temp_list not in ans:
                    ans.append(temp_list)
        
        return(ans)
