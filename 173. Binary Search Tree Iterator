#!/usr/bin/env python3

__author__ = 'Wei Mu'

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:

    def __init__(self, root: TreeNode):
        self.sorted_val = []
        self.add_root_val(root)
        self.sorted_val.sort()
        print(self.sorted_val)
        self.index = 0
        self.length = len(self.sorted_val)

    def next(self) -> int:
        """
        @return the next smallest number
        """
        self.index += 1
        return self.sorted_val[self.index-1]

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        
        return self.index < self.length
    
    def add_root_val(self, root):
        if root != None:
            self.sorted_val.append(root.val)
            self.add_root_val(root.left)
            self.add_root_val(root.right)
        


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
